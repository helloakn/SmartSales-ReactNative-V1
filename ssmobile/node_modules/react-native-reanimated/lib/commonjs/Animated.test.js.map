{"version":3,"sources":["Animated.test.js"],"names":["jest","mock","Value","timing","spring","decay","Animated","describe","beforeEach","numberOfNodes","ReanimatedModule","createNode","dropNode","getNumberOfNodes","checkIfNodesGetDetachedCorrectly","animation","TestComponent","React","Component","constructor","props","transX","anim","node","config","start","method","stop","res","__stopImmediately_testOnly","render","transform","translateX","ref","createRef","result","resMethod","finished","initial","wrapper","renderer","create","before","current","during","after","unmount","final","it","expect","name","duration","toValue","easing","Easing","inOut","ease","toBeTruthy","deceleration","damping","mass","stiffness","overshootClamping","restSpeedThreshold","restDisplacementThreshold","anim2","start1","start2","toBeFalsy","numberOfNodesBeforeUnmounting","numberOfNodesAfterUnmounting","pass","wrapper1","wrapper2","numberOfNodesBeforeDetach","numberOfNodesAfterDetach","toBe"],"mappings":"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","sourcesContent":["import Animated, { Easing } from './Animated';\nimport ReanimatedModule from './ReanimatedModule';\nimport React from 'react';\n\nimport renderer from 'react-test-renderer';\n\njest.mock('./ReanimatedEventEmitter');\njest.mock('./ReanimatedModule');\njest.mock('./derived/evaluateOnce');\njest.mock('./core/AnimatedProps');\n\nconst { Value, timing, spring, decay } = Animated;\ndescribe('Reanimated backward compatible API', () => {\n  beforeEach(() => {\n    let numberOfNodes = 0;\n    ReanimatedModule.createNode = () => numberOfNodes++;\n    ReanimatedModule.dropNode = () => numberOfNodes--;\n    ReanimatedModule.getNumberOfNodes = () => numberOfNodes;\n  });\n\n  const checkIfNodesGetDetachedCorrectly = animation => {\n    class TestComponent extends React.Component {\n      constructor(props) {\n        super(props);\n        this.transX = new Value(0);\n        this.anim = animation.node(this.transX, animation.config);\n      }\n\n      start(method) {\n        this.anim.start(method);\n      }\n\n      stop(res) {\n        this.anim.__stopImmediately_testOnly(res);\n      }\n\n      render() {\n        return (\n          <Animated.View style={{ transform: [{ translateX: this.transX }] }} />\n        );\n      }\n    }\n    const ref = React.createRef();\n    let result;\n    const resMethod = ({ finished }) => (result = finished);\n    const initial = ReanimatedModule.getNumberOfNodes();\n    const wrapper = renderer.create(<TestComponent ref={ref} />);\n    const before = ReanimatedModule.getNumberOfNodes();\n    ref.current.start(resMethod);\n    const during = ReanimatedModule.getNumberOfNodes();\n    ref.current.stop(true);\n    const after = ReanimatedModule.getNumberOfNodes();\n    wrapper.unmount();\n    const final = ReanimatedModule.getNumberOfNodes();\n\n    return (\n      result &&\n      initial === final &&\n      after === before &&\n      during > after &&\n      initial === 0 &&\n      before === 4\n    );\n  };\n\n  it('fails if timing does not attach nodes correctly', () => {\n    expect(\n      checkIfNodesGetDetachedCorrectly({\n        node: timing,\n        name: 'timing',\n        config: {\n          duration: 5000,\n          toValue: 120,\n          easing: Easing.inOut(Easing.ease),\n        },\n      })\n    ).toBeTruthy();\n  });\n\n  it('fails if decay does not attach nodes correctly', () => {\n    expect(\n      checkIfNodesGetDetachedCorrectly({\n        node: decay,\n        name: 'decay',\n        config: {\n          deceleration: 0.997,\n        },\n      })\n    ).toBeTruthy();\n  });\n\n  it('fails if spring does not attach nodes correctly', () => {\n    expect(\n      checkIfNodesGetDetachedCorrectly({\n        node: spring,\n        name: 'spring',\n        config: {\n          toValue: 0,\n          damping: 7,\n          mass: 1,\n          stiffness: 121.6,\n          overshootClamping: false,\n          restSpeedThreshold: 0.001,\n          restDisplacementThreshold: 0.001,\n        },\n      })\n    ).toBeTruthy();\n  });\n\n  it('fails if animation related nodes are still attached after detaching of value with two animations triggered', () => {\n    const { timing, Value } = Animated;\n    class TestComponent extends React.Component {\n      constructor(props) {\n        super(props);\n        this.transX = new Value(0);\n        const config = {\n          duration: 5000,\n          toValue: -120,\n          easing: Easing.inOut(Easing.ease),\n        };\n        this.anim = timing(this.transX, config);\n        this.anim2 = timing(this.transX, config);\n      }\n\n      start1(method) {\n        this.anim.start(method);\n      }\n\n      start2(method) {\n        this.anim2.start(method);\n      }\n\n      render() {\n        return (\n          <Animated.View style={{ transform: [{ translateX: this.transX }] }} />\n        );\n      }\n    }\n    const ref = React.createRef();\n    const wrapper = renderer.create(<TestComponent ref={ref} />);\n    let result = true;\n    const resMethod = ({ finished }) => (result = finished);\n    ref.current.start1(resMethod);\n    ref.current.start2(resMethod);\n    expect(result).toBeFalsy();\n    result = true;\n    const numberOfNodesBeforeUnmounting = ReanimatedModule.getNumberOfNodes();\n    wrapper.unmount();\n    expect(result).toBeFalsy();\n    const numberOfNodesAfterUnmounting = ReanimatedModule.getNumberOfNodes();\n    const pass =\n      numberOfNodesAfterUnmounting === 0 && numberOfNodesBeforeUnmounting > 0;\n    expect(pass).toBeTruthy();\n  });\n\n  it('fails if animation related nodes are detached if there are two children and only one detach', () => {\n    const { timing, Value } = Animated;\n    const transX = new Value(0);\n    const wrapper1 = renderer.create(\n      <Animated.View\n        style={{\n          transform: [{ translateX: transX }],\n        }}\n      />\n    );\n    const wrapper2 = renderer.create(\n      <Animated.View\n        style={{\n          transform: [{ translateX: transX }],\n        }}\n      />\n    );\n    const config = {\n      duration: 5000,\n      toValue: -120,\n      easing: Easing.inOut(Easing.ease),\n    };\n    const anim = timing(transX, config);\n    anim.start();\n    const numberOfNodesBeforeDetach = ReanimatedModule.getNumberOfNodes();\n    wrapper1.unmount();\n    const numberOfNodesAfterDetach = ReanimatedModule.getNumberOfNodes();\n    const result =\n      // 3 means AnimatedProps, AnimatedStyle and AnimatedTransform\n      // which are nodes not related to animation and has to be detached\n      numberOfNodesBeforeDetach - 3 === numberOfNodesAfterDetach &&\n      numberOfNodesAfterDetach > 3;\n    expect(result).toBeTruthy();\n    wrapper2.unmount();\n    expect(ReanimatedModule.getNumberOfNodes() === 0).toBeTruthy();\n  });\n\n  it('fails if animation attaches some node without view related', () => {\n    const { timing, Value } = Animated;\n    const transX = new Value(0);\n\n    const config = {\n      duration: 5000,\n      toValue: -120,\n      easing: Easing.inOut(Easing.ease),\n    };\n    const anim = timing(transX, config);\n    anim.start();\n    expect(ReanimatedModule.getNumberOfNodes()).toBe(0);\n  });\n});\n"]}