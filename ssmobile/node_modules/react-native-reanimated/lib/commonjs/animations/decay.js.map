{"version":3,"sources":["decay.js"],"names":["VELOCITY_EPS","decay","clock","state","config","lastTime","time","deltaTime","kv","deceleration","kx","v0","velocity","v","x","position","finished","procDecay"],"mappings":";;;;;;;AAAA;;AAcA,MAAMA,YAAY,GAAG,CAArB;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsBC,KAAtB,EAA6BC,MAA7B,EAAqC;AACnC,QAAMC,QAAQ,GAAG,gBAAKF,KAAK,CAACG,IAAX,EAAiBH,KAAK,CAACG,IAAvB,EAA6BJ,KAA7B,CAAjB;AACA,QAAMK,SAAS,GAAG,eAAIL,KAAJ,EAAWG,QAAX,CAAlB,CAFmC,CAInC;AACA;AACA;AAEA;AACA;;AACA,QAAMG,EAAE,GAAG,eAAIJ,MAAM,CAACK,YAAX,EAAyBF,SAAzB,CAAX;AACA,QAAMG,EAAE,GAAG,kBACT,oBAASN,MAAM,CAACK,YAAhB,EAA8B,eAAI,CAAJ,EAAOD,EAAP,CAA9B,CADS,EAET,eAAI,CAAJ,EAAOJ,MAAM,CAACK,YAAd,CAFS,CAAX;AAIA,QAAME,EAAE,GAAG,kBAAOR,KAAK,CAACS,QAAb,EAAuB,IAAvB,CAAX;AACA,QAAMC,CAAC,GAAG,oBAASF,EAAT,EAAaH,EAAb,EAAiB,IAAjB,CAAV;AACA,QAAMM,CAAC,GAAG,eAAIX,KAAK,CAACY,QAAV,EAAoB,oBAASJ,EAAT,EAAaD,EAAb,CAApB,CAAV;AACA,SAAO,iBAAM,CACX,eAAIP,KAAK,CAACY,QAAV,EAAoBD,CAApB,CADW,EAEX,eAAIX,KAAK,CAACS,QAAV,EAAoBC,CAApB,CAFW,EAGX,eAAIV,KAAK,CAACG,IAAV,EAAgBJ,KAAhB,CAHW,EAIX,gBAAK,oBAAS,eAAIW,CAAJ,CAAT,EAAiBb,YAAjB,CAAL,EAAqC,eAAIG,KAAK,CAACa,QAAV,EAAoB,CAApB,CAArC,CAJW,CAAN,CAAP;AAMD;;AAED,MAAMC,SAAS,GAAG,gBAChB,CAACf,KAAD,EAAQI,IAAR,EAAcM,QAAd,EAAwBG,QAAxB,EAAkCC,QAAlC,EAA4CP,YAA5C,KACER,KAAK,CAACC,KAAD,EAAQ;AAAEI,EAAAA,IAAF;AAAQM,EAAAA,QAAR;AAAkBG,EAAAA,QAAlB;AAA4BC,EAAAA;AAA5B,CAAR,EAAgD;AAAEP,EAAAA;AAAF,CAAhD,CAFS,CAAlB;;eAKe,CACbP,KADa,EAEb;AAAEI,EAAAA,IAAF;AAAQM,EAAAA,QAAR;AAAkBG,EAAAA,QAAlB;AAA4BC,EAAAA;AAA5B,CAFa,EAGb;AAAEP,EAAAA;AAAF,CAHa,KAIVQ,SAAS,CAACf,KAAD,EAAQI,IAAR,EAAcM,QAAd,EAAwBG,QAAxB,EAAkCC,QAAlC,EAA4CP,YAA5C,C","sourcesContent":["import {\n  cond,\n  sub,\n  pow,\n  divide,\n  multiply,\n  add,\n  block,\n  set,\n  lessThan,\n  proc,\n  abs,\n} from '../base';\n\nconst VELOCITY_EPS = 5;\n\nfunction decay(clock, state, config) {\n  const lastTime = cond(state.time, state.time, clock);\n  const deltaTime = sub(clock, lastTime);\n\n  // v0 = v / 1000\n  // v = v0 * powf(deceleration, dt);\n  // v = v * 1000;\n\n  // x0 = x;\n  // x = x0 + v0 * deceleration * (1 - powf(deceleration, dt)) / (1 - deceleration)\n  const kv = pow(config.deceleration, deltaTime);\n  const kx = divide(\n    multiply(config.deceleration, sub(1, kv)),\n    sub(1, config.deceleration)\n  );\n  const v0 = divide(state.velocity, 1000);\n  const v = multiply(v0, kv, 1000);\n  const x = add(state.position, multiply(v0, kx));\n  return block([\n    set(state.position, x),\n    set(state.velocity, v),\n    set(state.time, clock),\n    cond(lessThan(abs(v), VELOCITY_EPS), set(state.finished, 1)),\n  ]);\n}\n\nconst procDecay = proc(\n  (clock, time, velocity, position, finished, deceleration) =>\n    decay(clock, { time, velocity, position, finished }, { deceleration })\n);\n\nexport default (\n  clock,\n  { time, velocity, position, finished },\n  { deceleration }\n) => procDecay(clock, time, velocity, position, finished, deceleration);\n"]}