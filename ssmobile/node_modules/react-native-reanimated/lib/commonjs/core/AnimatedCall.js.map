{"version":3,"sources":["AnimatedCall.js"],"names":["NODE_MAPPING","Map","listener","data","node","get","id","_callback","args","AnimatedCall","AnimatedNode","constructor","jsFunction","every","el","type","input","_args","toString","__nodeID","__attach","set","size","ReanimatedEventEmitter","addListener","__detach","delete","removeAllListeners","__onEvaluate","map","val","createAnimatedCall","func"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAEA,MAAMA,YAAY,GAAG,IAAIC,GAAJ,EAArB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,QAAMC,IAAI,GAAGJ,YAAY,CAACK,GAAb,CAAiBF,IAAI,CAACG,EAAtB,CAAb;AACAF,EAAAA,IAAI,IAAIA,IAAI,CAACG,SAAL,CAAeJ,IAAI,CAACK,IAApB,CAAR;AACD;;AAED,MAAMC,YAAN,SAA2BC,qBAA3B,CAAwC;AAItCC,EAAAA,WAAW,CAACH,IAAD,EAAOI,UAAP,EAAmB;AAC5B,4BACEJ,IAAI,CAACK,KAAL,CAAWC,EAAE,IAAIA,EAAE,YAAYJ,qBAA/B,CADF;AAIA,UAAM;AAAEK,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,KAAK,EAAER;AAAvB,KAAN,EAAqCA,IAArC;;AAL4B;;AAAA;;AAM5B,SAAKD,SAAL,GAAiBK,UAAjB;AACA,SAAKK,KAAL,GAAaT,IAAb;AACD;;AAEDU,EAAAA,QAAQ,GAAG;AACT,uCAA4B,KAAKC,QAAjC;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,UAAMA,QAAN;;AACApB,IAAAA,YAAY,CAACqB,GAAb,CAAiB,KAAKF,QAAtB,EAAgC,IAAhC;;AACA,QAAInB,YAAY,CAACsB,IAAb,KAAsB,CAA1B,EAA6B;AAC3BC,sCAAuBC,WAAvB,CAAmC,kBAAnC,EAAuDtB,QAAvD;AACD;AACF;;AAEDuB,EAAAA,QAAQ,GAAG;AACTzB,IAAAA,YAAY,CAAC0B,MAAb,CAAoB,KAAKP,QAAzB;;AACA,QAAInB,YAAY,CAACsB,IAAb,KAAsB,CAA1B,EAA6B;AAC3BC,sCAAuBI,kBAAvB,CAA0C,kBAA1C;AACD;;AACD,UAAMF,QAAN;AACD;;AAEDG,EAAAA,YAAY,GAAG;AACb,SAAKrB,SAAL,CAAe,KAAKU,KAAL,CAAWY,GAAX,CAAeC,QAAf,CAAf;;AACA,WAAO,CAAP;AACD;;AArCqC;;AAwCjC,SAASC,kBAAT,CAA4BvB,IAA5B,EAAkCwB,IAAlC,EAAwC;AAC7C,SAAO,IAAIvB,YAAJ,CAAiBD,IAAjB,EAAuBwB,IAAvB,CAAP;AACD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport ReanimatedEventEmitter from '../ReanimatedEventEmitter';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\n\nconst NODE_MAPPING = new Map();\n\nfunction listener(data) {\n  const node = NODE_MAPPING.get(data.id);\n  node && node._callback(data.args);\n}\n\nclass AnimatedCall extends AnimatedNode {\n  _callback;\n  _args;\n\n  constructor(args, jsFunction) {\n    invariant(\n      args.every(el => el instanceof AnimatedNode),\n      `Reanimated: Animated.call node args should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes`\n    );\n    super({ type: 'call', input: args }, args);\n    this._callback = jsFunction;\n    this._args = args;\n  }\n\n  toString() {\n    return `AnimatedCall, id: ${this.__nodeID}`;\n  }\n\n  __attach() {\n    super.__attach();\n    NODE_MAPPING.set(this.__nodeID, this);\n    if (NODE_MAPPING.size === 1) {\n      ReanimatedEventEmitter.addListener('onReanimatedCall', listener);\n    }\n  }\n\n  __detach() {\n    NODE_MAPPING.delete(this.__nodeID);\n    if (NODE_MAPPING.size === 0) {\n      ReanimatedEventEmitter.removeAllListeners('onReanimatedCall');\n    }\n    super.__detach();\n  }\n\n  __onEvaluate() {\n    this._callback(this._args.map(val));\n    return 0;\n  }\n}\n\nexport function createAnimatedCall(args, func) {\n  return new AnimatedCall(args, func);\n}\n"]}