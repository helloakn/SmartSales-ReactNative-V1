{"version":3,"sources":["AnimatedCallFunc.js"],"names":["AnimatedCallFunc","AnimatedNode","constructor","what","args","params","every","el","type","_what","_args","_params","toString","__nodeID","beginContext","_previousCallID","forEach","param","index","endContext","__onEvaluate","value","createAnimatedCallFunc","proc","map","p"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,gBAAN,SAA+BC,qBAA/B,CAA4C;AAK1CC,EAAAA,WAAW,CAACC,IAAD,EAAOC,IAAP,EAAaC,MAAb,EAAqB;AAC9B,4BACEF,IAAI,YAAYF,qBADlB,gGAEyFE,IAFzF;AAIA,4BACEC,IAAI,CAACE,KAAL,CAAWC,EAAE,IAAIA,EAAE,YAAYN,qBAA/B,CADF,sGAE+FG,IAF/F;AAIA,4BACEC,MAAM,CAACC,KAAP,CAAaC,EAAE,IAAIA,EAAE,YAAYN,qBAAjC,CADF,wGAEiGI,MAFjG;AAIA,UACE;AACEG,MAAAA,IAAI,EAAE,UADR;AAEEL,MAAAA,IAFF;AAGEC,MAAAA,IAHF;AAIEC,MAAAA;AAJF,KADF,EAOE,CAAC,GAAGD,IAAJ,CAPF;;AAb8B;;AAAA;;AAAA;;AAAA;;AAsB9B,SAAKK,KAAL,GAAaN,IAAb;AACA,SAAKO,KAAL,GAAaN,IAAb;AACA,SAAKO,OAAL,GAAeN,MAAf;AACD;;AAEDO,EAAAA,QAAQ,GAAG;AACT,2CAAgC,KAAKC,QAArC;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,SAAKC,eAAL,GAAuB,8BAAvB;AACA,iCAAU,iCAAc,GAAd,GAAoB,KAAKF,QAAnC;;AAEA,SAAKF,OAAL,CAAaK,OAAb,CAAqB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACrCD,MAAAA,KAAK,CAACH,YAAN,CAAmB,KAAKJ,KAAL,CAAWQ,KAAX,CAAnB,EAAsC,KAAKH,eAA3C;AACD,KAFD;AAGD;;AAEDI,EAAAA,UAAU,GAAG;AACX,SAAKR,OAAL,CAAaK,OAAb,CAAqB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACrCD,MAAAA,KAAK,CAACE,UAAN;AACD,KAFD;;AAGA,iCAAU,KAAKJ,eAAf;AACD;;AAEDK,EAAAA,YAAY,GAAG;AACb,SAAKN,YAAL;AACA,UAAMO,KAAK,GAAG,cAAI,KAAKZ,KAAT,CAAd;AACA,SAAKU,UAAL;AACA,WAAOE,KAAP;AACD;;AAzDyC;;AA4DrC,SAASC,sBAAT,CAAgCC,IAAhC,EAAsCnB,IAAtC,EAA4CC,MAA5C,EAAoD;AACzD,SAAO,IAAIL,gBAAJ,CAAqBuB,IAArB,EAA2BnB,IAAI,CAACoB,GAAL,CAASC,CAAC,IAAI,0BAAMA,CAAN,CAAd,CAA3B,EAAoDpB,MAApD,CAAP;AACD","sourcesContent":["import AnimatedNode, { getCallID, setCallID } from './AnimatedNode';\nimport { adapt } from './AnimatedBlock';\nimport { val } from '../val';\nimport invariant from 'fbjs/lib/invariant';\n\nclass AnimatedCallFunc extends AnimatedNode {\n  _previousCallID;\n  _what;\n  _args;\n  _params;\n  constructor(what, args, params) {\n    invariant(\n      what instanceof AnimatedNode,\n      `Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got ${what}`\n    );\n    invariant(\n      args.every(el => el instanceof AnimatedNode),\n      `Reanimated: every AnimatedCallFunc 'args' argument should be of type AnimatedNode but got ${args}`\n    );\n    invariant(\n      params.every(el => el instanceof AnimatedNode),\n      `Reanimated: every AnimatedCallFunc 'params' argument should be of type AnimatedNode but got ${params}`\n    );\n    super(\n      {\n        type: 'callfunc',\n        what,\n        args,\n        params,\n      },\n      [...args]\n    );\n    this._what = what;\n    this._args = args;\n    this._params = params;\n  }\n\n  toString() {\n    return `AnimatedCallFunc, id: ${this.__nodeID}`;\n  }\n\n  beginContext() {\n    this._previousCallID = getCallID();\n    setCallID(getCallID() + '/' + this.__nodeID);\n\n    this._params.forEach((param, index) => {\n      param.beginContext(this._args[index], this._previousCallID);\n    });\n  }\n\n  endContext() {\n    this._params.forEach((param, index) => {\n      param.endContext();\n    });\n    setCallID(this._previousCallID);\n  }\n\n  __onEvaluate() {\n    this.beginContext();\n    const value = val(this._what);\n    this.endContext();\n    return value;\n  }\n}\n\nexport function createAnimatedCallFunc(proc, args, params) {\n  return new AnimatedCallFunc(proc, args.map(p => adapt(p)), params);\n}\n"]}