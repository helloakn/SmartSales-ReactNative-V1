{"version":3,"sources":["AnimatedCode.js"],"names":["assertNodesNotNull","code","children","exec","error","Error","Code","dependencies","nodes","AnimatedNode"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,SAASA,kBAAT,CAA4BC,IAA5B,EAAkCC,QAAlC,EAA4CC,IAA5C,EAAkD;AAChD,MAAI,CAACF,IAAL,EAAW;AACT,UAAMG,KAAK,GAAG,CAACF,QAAD,mBACF,OAAOA,QADL,kDAEF,OAAOC,IAFL,2BAAd;AAIA,UAAM,IAAIE,KAAJ,kIACsHD,KADtH,EAAN;AAGD;AACF;;AAED,SAASE,IAAT,CAAc;AAAEH,EAAAA,IAAF;AAAQD,EAAAA,QAAR;AAAkBK,EAAAA,YAAY,GAAG;AAAjC,CAAd,EAAqD;AACnD,QAAMC,KAAK,GAAGN,QAAQ,IAAIC,IAA1B;AAEA,MAAIF,IAAI,GAAG,IAAX;;AACA,MAAIO,KAAK,YAAYC,qBAArB,EAAmC;AACjCR,IAAAA,IAAI,GAAG,MAAMO,KAAb;AACD,GAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,UAArB,EAAiC;AACtCP,IAAAA,IAAI,GAAGO,KAAP;AACD;;AAEDR,EAAAA,kBAAkB,CAACC,IAAD,EAAOC,QAAP,EAAiBC,IAAjB,CAAlB;AAEA,wBAAQF,IAAR,EAAcM,YAAd;AACA,SAAO,IAAP;AACD;;eAEcD,I","sourcesContent":["import useCode from '../derived/useCode';\nimport AnimatedNode from './AnimatedNode';\n\nfunction assertNodesNotNull(code, children, exec) {\n  if (!code) {\n    const error = !children\n      ? `Got \"${typeof children}\" type passed to children`\n      : `Got \"${typeof exec}\" type passed to exec`;\n\n    throw new Error(\n      `<Animated.Code /> expects the 'exec' prop or children to be an animated node or a function returning an animated node. ${error}`\n    );\n  }\n}\n\nfunction Code({ exec, children, dependencies = [] }) {\n  const nodes = children || exec;\n\n  let code = null;\n  if (nodes instanceof AnimatedNode) {\n    code = () => nodes;\n  } else if (typeof nodes === 'function') {\n    code = nodes;\n  }\n\n  assertNodesNotNull(code, children, exec);\n\n  useCode(code, dependencies);\n  return null;\n}\n\nexport default Code;\n"]}