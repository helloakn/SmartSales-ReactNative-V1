{"version":3,"sources":["AnimatedConcat.js"],"names":["AnimatedConcat","AnimatedNode","constructor","input","every","el","type","_input","__onEvaluate","reduce","prev","current","toString","__nodeID","createAnimatedConcat","args","map","adapt"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,cAAN,SAA6BC,qBAA7B,CAA0C;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,4BACEA,KAAK,CAACC,KAAN,CACEC,EAAE,IACAA,EAAE,YAAYJ,qBAAd,IACA,OAAOI,EAAP,KAAc,QADd,IAEA,OAAOA,EAAP,KAAc,QAJlB,CADF,2JAOoJF,KAPpJ;AASA,UAAM;AAAEG,MAAAA,IAAI,EAAE,QAAR;AAAkBH,MAAAA;AAAlB,KAAN,EAAiCA,KAAjC;AACA,SAAKI,MAAL,GAAcJ,KAAd;AACD;;AAEDK,EAAAA,YAAY,GAAG;AACb,WAAO,KAAKD,MAAL,CAAYE,MAAZ,CAAmB,CAACC,IAAD,EAAOC,OAAP,KAAmBD,IAAI,GAAG,cAAIC,OAAJ,CAA7C,EAA2D,EAA3D,CAAP;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,yCAA8B,KAAKC,QAAnC;AACD;;AArBuC;;AAwBnC,SAASC,oBAAT,CAA8B,GAAGC,IAAjC,EAAuC;AAC5C,SAAO,IAAIf,cAAJ,CAAmBe,IAAI,CAACC,GAAL,CAASC,oBAAT,CAAnB,CAAP;AACD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { adapt } from '../core/AnimatedBlock';\nimport AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\n\nclass AnimatedConcat extends AnimatedNode {\n  constructor(input) {\n    invariant(\n      input.every(\n        el =>\n          el instanceof AnimatedNode ||\n          typeof el === 'number' ||\n          typeof el === 'string'\n      ),\n      `Reanimated: Animated.concat node arguments should be of type AnimatedNode or String or Number. One or more of them are not of that type. Node: ${input}`\n    );\n    super({ type: 'concat', input }, input);\n    this._input = input;\n  }\n\n  __onEvaluate() {\n    return this._input.reduce((prev, current) => prev + val(current), '');\n  }\n\n  toString() {\n    return `AnimatedConcat, id: ${this.__nodeID}`;\n  }\n}\n\nexport function createAnimatedConcat(...args) {\n  return new AnimatedConcat(args.map(adapt));\n}\n"]}