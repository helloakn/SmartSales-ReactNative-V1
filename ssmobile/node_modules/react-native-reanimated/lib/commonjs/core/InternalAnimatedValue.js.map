{"version":3,"sources":["InternalAnimatedValue.js"],"names":["sanitizeValue","value","undefined","Number","CONSTANT_VALUES","Map","initializeConstantValues","size","forEach","v","set","InternalAnimatedValue","AnimatedNode","valueForConstant","number","get","constructor","constant","type","_startingValue","_value","_animation","_constant","__detach","ReanimatedModule","getValue","__nodeID","val","__nodeConfig","__getValue","__detachAnimation","animation","__attachAnimation","__onEvaluate","__inputNodes","length","setValue","_updateValue","__forceUpdateCache"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,SAAOA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAA5B,IAAyC,OAAOD,KAAP,KAAiB,QAA1D,GACHA,KADG,GAEHE,MAAM,CAACF,KAAD,CAFV;AAGD;;AAED,MAAMG,eAAe,GAAG,IAAIC,GAAJ,EAAxB;;AAEA,SAASC,wBAAT,GAAoC;AAClC,MAAIF,eAAe,CAACG,IAAhB,KAAyB,CAA7B,EAAgC;AAC9B;AACD;;AACD,GAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAR,EAAW,CAAC,CAAZ,EAAe,CAAf,EAAkBC,OAAlB,CAA0BC,CAAC,IACzBL,eAAe,CAACM,GAAhB,CAAoBD,CAApB,EAAuB,IAAIE,qBAAJ,CAA0BF,CAA1B,EAA6B,IAA7B,CAAvB,CADF;AAGD;AAED;;;;;;AAIe,MAAME,qBAAN,SAAoCC,qBAApC,CAAiD;AAC9D,SAAOC,gBAAP,CAAwBC,MAAxB,EAAgC;AAC9BR,IAAAA,wBAAwB;AACxB,WACEF,eAAe,CAACW,GAAhB,CAAoBD,MAApB,KAA+B,IAAIH,qBAAJ,CAA0BG,MAA1B,EAAkC,IAAlC,CADjC;AAGD;;AAEDE,EAAAA,WAAW,CAACf,KAAD,EAAQgB,QAAQ,GAAG,KAAnB,EAA0B;AACnC,4BACEhB,KAAK,KAAK,IADZ,EAEE,0CAFF;AAIA,UAAM;AAAEiB,MAAAA,IAAI,EAAE,OAAR;AAAiBjB,MAAAA,KAAK,EAAED,aAAa,CAACC,KAAD;AAArC,KAAN;AACA,SAAKkB,cAAL,GAAsB,KAAKC,MAAL,GAAcnB,KAApC;AACA,SAAKoB,UAAL,GAAkB,IAAlB;AACA,SAAKC,SAAL,GAAiBL,QAAjB;AACD;;AAEDM,EAAAA,QAAQ,GAAG;AACT,QAAI,CAAC,KAAKD,SAAV,EAAqB;AACnB,UAAIE,0BAAiBC,QAArB,EAA+B;AAC7BD,kCAAiBC,QAAjB,CACE,KAAKC,QADP,EAEEC,GAAG,IAAK,KAAKC,YAAL,CAAkB3B,KAAlB,GAA0B0B,GAFpC;AAID,OALD,MAKO;AACL,aAAKC,YAAL,CAAkB3B,KAAlB,GAA0B,KAAK4B,UAAL,EAA1B;AACD;AACF;;AACD,SAAKC,iBAAL,CAAuB,KAAKT,UAA5B;;AACA,UAAME,QAAN;AACD;;AAEDO,EAAAA,iBAAiB,CAACC,SAAD,EAAY;AAC3BA,IAAAA,SAAS,IAAIA,SAAS,CAACR,QAAV,EAAb;;AACA,QAAI,KAAKF,UAAL,KAAoBU,SAAxB,EAAmC;AACjC,WAAKV,UAAL,GAAkB,IAAlB;AACD;AACF;;AAEDW,EAAAA,iBAAiB,CAACD,SAAD,EAAY;AAC3B,SAAKD,iBAAL,CAAuB,KAAKT,UAA5B;;AACA,SAAKA,UAAL,GAAkBU,SAAlB;AACD;;AAEDE,EAAAA,YAAY,GAAG;AACb,QAAI,KAAKC,YAAL,IAAqB,KAAKA,YAAL,CAAkBC,MAA3C,EAAmD;AACjD,WAAKD,YAAL,CAAkB1B,OAAlB,CAA0BmB,QAA1B;AACD;;AACD,WAAO,KAAKP,MAAZ;AACD,GAnD6D,CAqD9D;;;AACAgB,EAAAA,QAAQ,CAACnC,KAAD,EAAQ;AACd,SAAK6B,iBAAL,CAAuB,KAAKT,UAA5B;;AACA,SAAKgB,YAAL,CAAkBpC,KAAlB;AACD;;AAEDoC,EAAAA,YAAY,CAACpC,KAAD,EAAQ;AAClB,SAAKmB,MAAL,GAAcnB,KAAd;;AACA,SAAKqC,kBAAL,CAAwBrC,KAAxB;AACD;;AA9D6D","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\nimport ReanimatedModule from '../ReanimatedModule';\nimport invariant from 'fbjs/lib/invariant';\n\nfunction sanitizeValue(value) {\n  return value === null || value === undefined || typeof value === 'string'\n    ? value\n    : Number(value);\n}\n\nconst CONSTANT_VALUES = new Map();\n\nfunction initializeConstantValues() {\n  if (CONSTANT_VALUES.size !== 0) {\n    return;\n  }\n  [0, -1, 1, -2, 2].forEach(v =>\n    CONSTANT_VALUES.set(v, new InternalAnimatedValue(v, true))\n  );\n}\n\n/**\n * This class has been made internal in order to omit dependencies' cycles which\n * were caused by imperative setValue and interpolate â€“ they are currently exposed with AnimatedValue.js\n */\nexport default class InternalAnimatedValue extends AnimatedNode {\n  static valueForConstant(number) {\n    initializeConstantValues();\n    return (\n      CONSTANT_VALUES.get(number) || new InternalAnimatedValue(number, true)\n    );\n  }\n\n  constructor(value, constant = false) {\n    invariant(\n      value !== null,\n      'Animated.Value cannot be set to the null'\n    );\n    super({ type: 'value', value: sanitizeValue(value) });\n    this._startingValue = this._value = value;\n    this._animation = null;\n    this._constant = constant;\n  }\n\n  __detach() {\n    if (!this._constant) {\n      if (ReanimatedModule.getValue) {\n        ReanimatedModule.getValue(\n          this.__nodeID,\n          val => (this.__nodeConfig.value = val)\n        );\n      } else {\n        this.__nodeConfig.value = this.__getValue();\n      }\n    }\n    this.__detachAnimation(this._animation);\n    super.__detach();\n  }\n\n  __detachAnimation(animation) {\n    animation && animation.__detach();\n    if (this._animation === animation) {\n      this._animation = null;\n    }\n  }\n\n  __attachAnimation(animation) {\n    this.__detachAnimation(this._animation);\n    this._animation = animation;\n  }\n\n  __onEvaluate() {\n    if (this.__inputNodes && this.__inputNodes.length) {\n      this.__inputNodes.forEach(val);\n    }\n    return this._value;\n  }\n\n  // AnimatedValue will override this method to modify the value of a native node.\n  setValue(value) {\n    this.__detachAnimation(this._animation);\n    this._updateValue(value);\n  }\n\n  _updateValue(value) {\n    this._value = value;\n    this.__forceUpdateCache(value);\n  }\n}\n"]}