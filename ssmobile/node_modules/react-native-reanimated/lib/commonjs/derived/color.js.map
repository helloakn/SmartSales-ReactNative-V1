{"version":3,"sources":["color.js"],"names":["procColor","r","g","b","a","color","Platform","OS","Math","pow","AnimatedNode","round"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;;;AAEA,MAAMA,SAAS,GAAG,gBAAK,UAASC,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB,EAAqB;AAC1C,QAAMC,KAAK,GAAG,eACZ,oBAASD,CAAT,EAAY,KAAK,EAAjB,CADY,EAEZ,oBAAS,iBAAMH,CAAN,CAAT,EAAmB,KAAK,EAAxB,CAFY,EAGZ,oBAAS,iBAAMC,CAAN,CAAT,EAAmB,KAAK,CAAxB,CAHY,EAIZ,iBAAMC,CAAN,CAJY,CAAd;;AAOA,MAAIG,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B;AACA,WAAO,gBACL,oBAASF,KAAT,EAAiB,KAAK,EAAN,KAAc,CAA9B,CADK,EAELA,KAFK,EAGL,eAAIA,KAAJ,EAAWG,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,EAAZ,CAAX,CAHK,CAAP;AAKD;;AACD,SAAOJ,KAAP;AACD,CAjBiB,CAAlB;;AAmBe,SAASA,KAAT,CAAeJ,CAAf,EAAkBC,CAAlB,EAAqBC,CAArB,EAAwBC,CAAC,GAAG,CAA5B,EAA+B;AAC5C,MAAIE,sBAASC,EAAT,KAAgB,KAApB,EAA2B;AACzB;AACA,WAAO,kBAAO,OAAP,EAAgBN,CAAhB,EAAmB,GAAnB,EAAwBC,CAAxB,EAA2B,GAA3B,EAAgCC,CAAhC,EAAmC,GAAnC,EAAwCC,CAAxC,EAA2C,GAA3C,CAAP;AACD;;AAED,MAAIA,CAAC,YAAYM,qBAAjB,EAA+B;AAC7BN,IAAAA,CAAC,GAAG,iBAAM,oBAASA,CAAT,EAAY,GAAZ,CAAN,CAAJ;AACD,GAFD,MAEO;AACLA,IAAAA,CAAC,GAAGI,IAAI,CAACG,KAAL,CAAWP,CAAC,GAAG,GAAf,CAAJ;AACD;;AAED,SAAOJ,SAAS,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,CAAhB;AACD","sourcesContent":["import { Platform } from 'react-native';\n\nimport { add, cond, concat, lessThan, multiply, round, sub, proc } from '../base';\nimport AnimatedNode from '../core/AnimatedNode';\n\nconst procColor = proc(function(r, g, b, a) {\n  const color = add(\n    multiply(a, 1 << 24),\n    multiply(round(r), 1 << 16),\n    multiply(round(g), 1 << 8),\n    round(b)\n  );\n  \n  if (Platform.OS === 'android') {\n    // on Android color is represented as signed 32 bit int\n    return cond(\n      lessThan(color, (1 << 31) >>> 0),\n      color,\n      sub(color, Math.pow(2, 32))\n    );\n  }\n  return color;\n});\n\nexport default function color(r, g, b, a = 1) {\n  if (Platform.OS === 'web') {\n    // doesn't support bit shifting\n    return concat('rgba(', r, ',', g, ',', b, ',', a, ')');\n  }\n\n  if (a instanceof AnimatedNode) {\n    a = round(multiply(a, 255));\n  } else {\n    a = Math.round(a * 255);\n  }\n\n  return procColor(r, g, b, a);\n}\n"]}