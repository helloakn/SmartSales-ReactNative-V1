{"version":3,"sources":["Animated.test.js"],"names":["Animated","Easing","ReanimatedModule","React","renderer","jest","mock","Value","timing","spring","decay","describe","beforeEach","numberOfNodes","createNode","dropNode","getNumberOfNodes","checkIfNodesGetDetachedCorrectly","animation","TestComponent","Component","constructor","props","transX","anim","node","config","start","method","stop","res","__stopImmediately_testOnly","render","transform","translateX","ref","createRef","result","resMethod","finished","initial","wrapper","create","before","current","during","after","unmount","final","it","expect","name","duration","toValue","easing","inOut","ease","toBeTruthy","deceleration","damping","mass","stiffness","overshootClamping","restSpeedThreshold","restDisplacementThreshold","anim2","start1","start2","toBeFalsy","numberOfNodesBeforeUnmounting","numberOfNodesAfterUnmounting","pass","wrapper1","wrapper2","numberOfNodesBeforeDetach","numberOfNodesAfterDetach","toBe"],"mappings":"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","sourcesContent":["import Animated, { Easing } from './Animated';\nimport ReanimatedModule from './ReanimatedModule';\nimport React from 'react';\n\nimport renderer from 'react-test-renderer';\n\njest.mock('./ReanimatedEventEmitter');\njest.mock('./ReanimatedModule');\njest.mock('./derived/evaluateOnce');\njest.mock('./core/AnimatedProps');\n\nconst { Value, timing, spring, decay } = Animated;\ndescribe('Reanimated backward compatible API', () => {\n  beforeEach(() => {\n    let numberOfNodes = 0;\n    ReanimatedModule.createNode = () => numberOfNodes++;\n    ReanimatedModule.dropNode = () => numberOfNodes--;\n    ReanimatedModule.getNumberOfNodes = () => numberOfNodes;\n  });\n\n  const checkIfNodesGetDetachedCorrectly = animation => {\n    class TestComponent extends React.Component {\n      constructor(props) {\n        super(props);\n        this.transX = new Value(0);\n        this.anim = animation.node(this.transX, animation.config);\n      }\n\n      start(method) {\n        this.anim.start(method);\n      }\n\n      stop(res) {\n        this.anim.__stopImmediately_testOnly(res);\n      }\n\n      render() {\n        return (\n          <Animated.View style={{ transform: [{ translateX: this.transX }] }} />\n        );\n      }\n    }\n    const ref = React.createRef();\n    let result;\n    const resMethod = ({ finished }) => (result = finished);\n    const initial = ReanimatedModule.getNumberOfNodes();\n    const wrapper = renderer.create(<TestComponent ref={ref} />);\n    const before = ReanimatedModule.getNumberOfNodes();\n    ref.current.start(resMethod);\n    const during = ReanimatedModule.getNumberOfNodes();\n    ref.current.stop(true);\n    const after = ReanimatedModule.getNumberOfNodes();\n    wrapper.unmount();\n    const final = ReanimatedModule.getNumberOfNodes();\n\n    return (\n      result &&\n      initial === final &&\n      after === before &&\n      during > after &&\n      initial === 0 &&\n      before === 4\n    );\n  };\n\n  it('fails if timing does not attach nodes correctly', () => {\n    expect(\n      checkIfNodesGetDetachedCorrectly({\n        node: timing,\n        name: 'timing',\n        config: {\n          duration: 5000,\n          toValue: 120,\n          easing: Easing.inOut(Easing.ease),\n        },\n      })\n    ).toBeTruthy();\n  });\n\n  it('fails if decay does not attach nodes correctly', () => {\n    expect(\n      checkIfNodesGetDetachedCorrectly({\n        node: decay,\n        name: 'decay',\n        config: {\n          deceleration: 0.997,\n        },\n      })\n    ).toBeTruthy();\n  });\n\n  it('fails if spring does not attach nodes correctly', () => {\n    expect(\n      checkIfNodesGetDetachedCorrectly({\n        node: spring,\n        name: 'spring',\n        config: {\n          toValue: 0,\n          damping: 7,\n          mass: 1,\n          stiffness: 121.6,\n          overshootClamping: false,\n          restSpeedThreshold: 0.001,\n          restDisplacementThreshold: 0.001,\n        },\n      })\n    ).toBeTruthy();\n  });\n\n  it('fails if animation related nodes are still attached after detaching of value with two animations triggered', () => {\n    const { timing, Value } = Animated;\n    class TestComponent extends React.Component {\n      constructor(props) {\n        super(props);\n        this.transX = new Value(0);\n        const config = {\n          duration: 5000,\n          toValue: -120,\n          easing: Easing.inOut(Easing.ease),\n        };\n        this.anim = timing(this.transX, config);\n        this.anim2 = timing(this.transX, config);\n      }\n\n      start1(method) {\n        this.anim.start(method);\n      }\n\n      start2(method) {\n        this.anim2.start(method);\n      }\n\n      render() {\n        return (\n          <Animated.View style={{ transform: [{ translateX: this.transX }] }} />\n        );\n      }\n    }\n    const ref = React.createRef();\n    const wrapper = renderer.create(<TestComponent ref={ref} />);\n    let result = true;\n    const resMethod = ({ finished }) => (result = finished);\n    ref.current.start1(resMethod);\n    ref.current.start2(resMethod);\n    expect(result).toBeFalsy();\n    result = true;\n    const numberOfNodesBeforeUnmounting = ReanimatedModule.getNumberOfNodes();\n    wrapper.unmount();\n    expect(result).toBeFalsy();\n    const numberOfNodesAfterUnmounting = ReanimatedModule.getNumberOfNodes();\n    const pass =\n      numberOfNodesAfterUnmounting === 0 && numberOfNodesBeforeUnmounting > 0;\n    expect(pass).toBeTruthy();\n  });\n\n  it('fails if animation related nodes are detached if there are two children and only one detach', () => {\n    const { timing, Value } = Animated;\n    const transX = new Value(0);\n    const wrapper1 = renderer.create(\n      <Animated.View\n        style={{\n          transform: [{ translateX: transX }],\n        }}\n      />\n    );\n    const wrapper2 = renderer.create(\n      <Animated.View\n        style={{\n          transform: [{ translateX: transX }],\n        }}\n      />\n    );\n    const config = {\n      duration: 5000,\n      toValue: -120,\n      easing: Easing.inOut(Easing.ease),\n    };\n    const anim = timing(transX, config);\n    anim.start();\n    const numberOfNodesBeforeDetach = ReanimatedModule.getNumberOfNodes();\n    wrapper1.unmount();\n    const numberOfNodesAfterDetach = ReanimatedModule.getNumberOfNodes();\n    const result =\n      // 3 means AnimatedProps, AnimatedStyle and AnimatedTransform\n      // which are nodes not related to animation and has to be detached\n      numberOfNodesBeforeDetach - 3 === numberOfNodesAfterDetach &&\n      numberOfNodesAfterDetach > 3;\n    expect(result).toBeTruthy();\n    wrapper2.unmount();\n    expect(ReanimatedModule.getNumberOfNodes() === 0).toBeTruthy();\n  });\n\n  it('fails if animation attaches some node without view related', () => {\n    const { timing, Value } = Animated;\n    const transX = new Value(0);\n\n    const config = {\n      duration: 5000,\n      toValue: -120,\n      easing: Easing.inOut(Easing.ease),\n    };\n    const anim = timing(transX, config);\n    anim.start();\n    expect(ReanimatedModule.getNumberOfNodes()).toBe(0);\n  });\n});\n"]}