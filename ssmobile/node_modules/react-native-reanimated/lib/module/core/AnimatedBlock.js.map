{"version":3,"sources":["AnimatedBlock.js"],"names":["invariant","val","AnimatedNode","InternalAnimatedValue","AnimatedBlock","constructor","array","every","el","type","block","_array","toString","__nodeID","__onEvaluate","result","forEach","node","createAnimatedBlock","items","adapt","nodify","v","__isProxy","__val","valueForConstant","Array","isArray","map"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;;AAEA,MAAMC,aAAN,SAA4BF,YAA5B,CAAyC;AAGvCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjBN,IAAAA,SAAS,CACPM,KAAK,CAACC,KAAN,CAAYC,EAAE,IAAIA,EAAE,YAAYN,YAAhC,CADO,8IAAT;AAIA,UAAM;AAAEO,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,KAAK,EAAEJ;AAAxB,KAAN,EAAuCA,KAAvC;;AALiB;;AAMjB,SAAKK,MAAL,GAAcL,KAAd;AACD;;AAEDM,EAAAA,QAAQ,GAAG;AACT,wCAA6B,KAAKC,QAAlC;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,QAAIC,MAAJ;;AACA,SAAKJ,MAAL,CAAYK,OAAZ,CAAoBC,IAAI,IAAI;AAC1BF,MAAAA,MAAM,GAAGd,GAAG,CAACgB,IAAD,CAAZ;AACD,KAFD;;AAGA,WAAOF,MAAP;AACD;;AAtBsC;;AAyBzC,OAAO,SAASG,mBAAT,CAA6BC,KAA7B,EAAoC;AACzC,SAAOC,KAAK,CAACD,KAAD,CAAZ;AACD;;AAED,SAASE,MAAT,CAAgBC,CAAhB,EAAmB;AACjB,MAAI,OAAOA,CAAP,KAAa,QAAb,KAAyBA,CAAzB,aAAyBA,CAAzB,uBAAyBA,CAAC,CAAEC,SAA5B,CAAJ,EAA2C;AACzC,QAAI,CAACD,CAAC,CAACE,KAAP,EAAc;AACZF,MAAAA,CAAC,CAACE,KAAF,GAAU,IAAIrB,qBAAJ,CAA0B,CAA1B,CAAV;AACD;;AACD,WAAOmB,CAAC,CAACE,KAAT;AACD,GANgB,CAOjB;;;AACA,SAAOF,CAAC,YAAYpB,YAAb,GACHoB,CADG,GAEHnB,qBAAqB,CAACsB,gBAAtB,CAAuCH,CAAvC,CAFJ;AAGD;;AAED,OAAO,SAASF,KAAT,CAAeE,CAAf,EAAkB;AACvB,SAAOI,KAAK,CAACC,OAAN,CAAcL,CAAd,IACH,IAAIlB,aAAJ,CAAkBkB,CAAC,CAACM,GAAF,CAAMX,IAAI,IAAIG,KAAK,CAACH,IAAD,CAAnB,CAAlB,CADG,GAEHI,MAAM,CAACC,CAAD,CAFV;AAGD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\nimport InternalAnimatedValue from './InternalAnimatedValue';\n\nclass AnimatedBlock extends AnimatedNode {\n  _array;\n\n  constructor(array) {\n    invariant(\n      array.every(el => el instanceof AnimatedNode),\n      `Reanimated: Animated.block node argument should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes`\n    );\n    super({ type: 'block', block: array }, array);\n    this._array = array;\n  }\n\n  toString() {\n    return `AnimatedBlock, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    let result;\n    this._array.forEach(node => {\n      result = val(node);\n    });\n    return result;\n  }\n}\n\nexport function createAnimatedBlock(items) {\n  return adapt(items);\n}\n\nfunction nodify(v) {\n  if (typeof v === 'object' && v?.__isProxy) {\n    if (!v.__val) {\n      v.__val = new InternalAnimatedValue(0);\n    }\n    return v.__val;\n  }\n  // TODO: cache some typical static values (e.g. 0, 1, -1)\n  return v instanceof AnimatedNode\n    ? v\n    : InternalAnimatedValue.valueForConstant(v);\n}\n\nexport function adapt(v) {\n  return Array.isArray(v)\n    ? new AnimatedBlock(v.map(node => adapt(node)))\n    : nodify(v);\n}\n"]}