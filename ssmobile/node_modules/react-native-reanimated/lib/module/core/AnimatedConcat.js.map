{"version":3,"sources":["AnimatedConcat.js"],"names":["invariant","adapt","AnimatedNode","val","AnimatedConcat","constructor","input","every","el","type","_input","__onEvaluate","reduce","prev","current","toString","__nodeID","createAnimatedConcat","args","map"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,SAASC,KAAT,QAAsB,uBAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,GAAT,QAAoB,QAApB;;AAEA,MAAMC,cAAN,SAA6BF,YAA7B,CAA0C;AACxCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjBN,IAAAA,SAAS,CACPM,KAAK,CAACC,KAAN,CACEC,EAAE,IACAA,EAAE,YAAYN,YAAd,IACA,OAAOM,EAAP,KAAc,QADd,IAEA,OAAOA,EAAP,KAAc,QAJlB,CADO,2JAO2IF,KAP3I,EAAT;AASA,UAAM;AAAEG,MAAAA,IAAI,EAAE,QAAR;AAAkBH,MAAAA;AAAlB,KAAN,EAAiCA,KAAjC;AACA,SAAKI,MAAL,GAAcJ,KAAd;AACD;;AAEDK,EAAAA,YAAY,GAAG;AACb,WAAO,KAAKD,MAAL,CAAYE,MAAZ,CAAmB,CAACC,IAAD,EAAOC,OAAP,KAAmBD,IAAI,GAAGV,GAAG,CAACW,OAAD,CAAhD,EAA2D,EAA3D,CAAP;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,yCAA8B,KAAKC,QAAnC;AACD;;AArBuC;;AAwB1C,OAAO,SAASC,oBAAT,CAA8B,GAAGC,IAAjC,EAAuC;AAC5C,SAAO,IAAId,cAAJ,CAAmBc,IAAI,CAACC,GAAL,CAASlB,KAAT,CAAnB,CAAP;AACD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { adapt } from '../core/AnimatedBlock';\nimport AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\n\nclass AnimatedConcat extends AnimatedNode {\n  constructor(input) {\n    invariant(\n      input.every(\n        el =>\n          el instanceof AnimatedNode ||\n          typeof el === 'number' ||\n          typeof el === 'string'\n      ),\n      `Reanimated: Animated.concat node arguments should be of type AnimatedNode or String or Number. One or more of them are not of that type. Node: ${input}`\n    );\n    super({ type: 'concat', input }, input);\n    this._input = input;\n  }\n\n  __onEvaluate() {\n    return this._input.reduce((prev, current) => prev + val(current), '');\n  }\n\n  toString() {\n    return `AnimatedConcat, id: ${this.__nodeID}`;\n  }\n}\n\nexport function createAnimatedConcat(...args) {\n  return new AnimatedConcat(args.map(adapt));\n}\n"]}