{"version":3,"sources":["AnimatedCond.js"],"names":["invariant","adapt","val","AnimatedNode","AnimatedCond","constructor","condition","ifBlock","elseBlock","undefined","type","cond","_condition","_ifBlock","_elseBlock","toString","__nodeID","__onEvaluate","createAnimatedCond"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,SAASC,KAAT,QAAsB,uBAAtB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,YAAN,SAA2BD,YAA3B,CAAwC;AAKtCE,EAAAA,WAAW,CAACC,SAAD,EAAYC,OAAZ,EAAqBC,SAArB,EAAgC;AACzCR,IAAAA,SAAS,CACPM,SAAS,YAAYH,YADd,iGAEiFG,SAFjF,EAAT;AAIAN,IAAAA,SAAS,CACPO,OAAO,YAAYJ,YADZ,kGAEkFI,OAFlF,EAAT;AAIAP,IAAAA,SAAS,CACPQ,SAAS,YAAYL,YAArB,IAAqCK,SAAS,KAAKC,SAD5C,wHAEwGD,SAFxG,EAAT;AAIA,UACE;AACEE,MAAAA,IAAI,EAAE,MADR;AAEEC,MAAAA,IAAI,EAAEL,SAFR;AAGEC,MAAAA,OAHF;AAIEC,MAAAA;AAJF,KADF,EAOE,CAACF,SAAD,EAAYC,OAAZ,EAAqBC,SAArB,CAPF;;AAbyC;;AAAA;;AAAA;;AAsBzC,SAAKI,UAAL,GAAkBN,SAAlB;AACA,SAAKO,QAAL,GAAgBN,OAAhB;AACA,SAAKO,UAAL,GAAkBN,SAAlB;AACD;;AAEDO,EAAAA,QAAQ,GAAG;AACT,uCAA4B,KAAKC,QAAjC;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,QAAIf,GAAG,CAAC,KAAKU,UAAN,CAAP,EAA0B;AACxB,aAAOV,GAAG,CAAC,KAAKW,QAAN,CAAV;AACD,KAFD,MAEO;AACL,aAAO,KAAKC,UAAL,KAAoBL,SAApB,GAAgCP,GAAG,CAAC,KAAKY,UAAN,CAAnC,GAAuDL,SAA9D;AACD;AACF;;AA1CqC;;AA6CxC,OAAO,SAASS,kBAAT,CAA4BP,IAA5B,EAAkCJ,OAAlC,EAA2CC,SAA3C,EAAsD;AAC3D,SAAO,IAAIJ,YAAJ,CACLH,KAAK,CAACU,IAAD,CADA,EAELV,KAAK,CAACM,OAAD,CAFA,EAGLC,SAAS,KAAKC,SAAd,GAA0BA,SAA1B,GAAsCR,KAAK,CAACO,SAAD,CAHtC,CAAP;AAKD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { adapt } from '../core/AnimatedBlock';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedCond extends AnimatedNode {\n  _condition;\n  _ifBlock;\n  _elseBlock;\n\n  constructor(condition, ifBlock, elseBlock) {\n    invariant(\n      condition instanceof AnimatedNode,\n      `Reanimated: Animated.cond node first argument should be of type AnimatedNode but got ${condition}`\n    );\n    invariant(\n      ifBlock instanceof AnimatedNode,\n      `Reanimated: Animated.cond node second argument should be of type AnimatedNode but got ${ifBlock}`\n    );\n    invariant(\n      elseBlock instanceof AnimatedNode || elseBlock === undefined,\n      `Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got ${elseBlock}`\n    );\n    super(\n      {\n        type: 'cond',\n        cond: condition,\n        ifBlock,\n        elseBlock,\n      },\n      [condition, ifBlock, elseBlock]\n    );\n    this._condition = condition;\n    this._ifBlock = ifBlock;\n    this._elseBlock = elseBlock;\n  }\n\n  toString() {\n    return `AnimatedCond, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    if (val(this._condition)) {\n      return val(this._ifBlock);\n    } else {\n      return this._elseBlock !== undefined ? val(this._elseBlock) : undefined;\n    }\n  }\n}\n\nexport function createAnimatedCond(cond, ifBlock, elseBlock) {\n  return new AnimatedCond(\n    adapt(cond),\n    adapt(ifBlock),\n    elseBlock === undefined ? undefined : adapt(elseBlock)\n  );\n}\n"]}