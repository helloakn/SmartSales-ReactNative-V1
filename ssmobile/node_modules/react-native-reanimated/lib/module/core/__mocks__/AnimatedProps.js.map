{"version":3,"sources":["AnimatedProps.js"],"names":["AnimatedNode","AnimatedEvent","AnimatedStyle","createOrReuseStyleNode","deepEqual","sanitizeProps","inputProps","props","key","value","__nodeID","createOrReusePropsNode","callback","oldNode","style","_props","config","_config","AnimatedProps","constructor","type","Object","values","filter","n","_callback","__attach","__getProps","__onEvaluate","__getValue","update","setNativeView","animatedView","_animatedView"],"mappings":"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","sourcesContent":["import AnimatedNode from '../AnimatedNode';\nimport AnimatedEvent from '../AnimatedEvent';\nimport AnimatedStyle, { createOrReuseStyleNode } from '../AnimatedStyle';\n\nimport deepEqual from 'fbjs/lib/areEqual';\n\n// This file has been mocked as react-native's `findNodeHandle` is returning undefined value;\n// and I became easier to mock whole this file instead of mocking RN\n\nfunction sanitizeProps(inputProps) {\n  const props = {};\n  for (const key in inputProps) {\n    const value = inputProps[key];\n    if (value instanceof AnimatedNode && !(value instanceof AnimatedEvent)) {\n      props[key] = value.__nodeID;\n    }\n  }\n  return props;\n}\n\nexport function createOrReusePropsNode(props, callback, oldNode) {\n  if (props.style) {\n    props = {\n      ...props,\n      style: createOrReuseStyleNode(\n        props.style,\n        oldNode && oldNode._props.style\n      ),\n    };\n  }\n  const config = sanitizeProps(props);\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n  return new AnimatedProps(props, config, callback);\n}\n\nclass AnimatedProps extends AnimatedNode {\n  constructor(props, config, callback) {\n    super(\n      { type: 'props', props: config },\n      Object.values(props).filter(n => !(n instanceof AnimatedEvent))\n    );\n    this._config = config;\n    this._props = props;\n    this._callback = callback;\n    this.__attach();\n  }\n\n  __getProps() {\n    const props = {};\n    for (const key in this._props) {\n      const value = this._props[key];\n      if (value instanceof AnimatedNode) {\n        if (value instanceof AnimatedStyle) {\n          props[key] = value.__getProps();\n        }\n      } else {\n        props[key] = value;\n      }\n    }\n    return props;\n  }\n\n  __onEvaluate() {\n    const props = {};\n    for (const key in this._props) {\n      const value = this._props[key];\n      if (value instanceof AnimatedNode) {\n        props[key] = value.__getValue();\n      }\n    }\n    return props;\n  }\n\n  update() {\n    this._callback();\n  }\n\n  setNativeView(animatedView) {\n    if (this._animatedView === animatedView) {\n      return;\n    }\n    this._animatedView = animatedView;\n  }\n}\n"]}