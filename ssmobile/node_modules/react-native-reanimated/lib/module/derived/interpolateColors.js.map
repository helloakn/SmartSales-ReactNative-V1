{"version":3,"sources":["interpolateColors.js"],"names":["processColor","round","color","interpolate","Extrapolate","red","c","green","blue","opacity","interpolateColors","animationValue","options","inputRange","outputColorRange","colors","map","r","outputRange","extrapolate","CLAMP","g","b","a"],"mappings":"AAAA,SAASA,YAAT,QAA6B,cAA7B;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,WAAP,IAAsBC,WAAtB,QAAyC,eAAzC;;AAEA,SAASC,GAAT,CAAaC,CAAb,EAAgB;AACd,SAAQA,CAAC,IAAI,EAAN,GAAY,GAAnB;AACD;;AACD,SAASC,KAAT,CAAeD,CAAf,EAAkB;AAChB,SAAQA,CAAC,IAAI,CAAN,GAAW,GAAlB;AACD;;AACD,SAASE,IAAT,CAAcF,CAAd,EAAiB;AACf,SAAOA,CAAC,GAAG,GAAX;AACD;;AACD,SAASG,OAAT,CAAiBH,CAAjB,EAAoB;AAClB,SAAO,CAAEA,CAAC,IAAI,EAAN,GAAY,GAAb,IAAoB,GAA3B;AACD;AAED;;;;;;;;;;;;;AAWA,eAAe,SAASI,iBAAT,CAA2BC,cAA3B,EAA2CC,OAA3C,EAAoD;AACjE,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAmCF,OAAzC;AACA,QAAMG,MAAM,GAAGD,gBAAgB,CAACE,GAAjB,CAAqBhB,YAArB,CAAf;AAEA,QAAMiB,CAAC,GAAGhB,KAAK,CACbE,WAAW,CAACQ,cAAD,EAAiB;AAC1BE,IAAAA,UAD0B;AAE1BK,IAAAA,WAAW,EAAEH,MAAM,CAACC,GAAP,CAAWX,GAAX,CAFa;AAG1Bc,IAAAA,WAAW,EAAEf,WAAW,CAACgB;AAHC,GAAjB,CADE,CAAf;AAOA,QAAMC,CAAC,GAAGpB,KAAK,CACbE,WAAW,CAACQ,cAAD,EAAiB;AAC1BE,IAAAA,UAD0B;AAE1BK,IAAAA,WAAW,EAAEH,MAAM,CAACC,GAAP,CAAWT,KAAX,CAFa;AAG1BY,IAAAA,WAAW,EAAEf,WAAW,CAACgB;AAHC,GAAjB,CADE,CAAf;AAOA,QAAME,CAAC,GAAGrB,KAAK,CACbE,WAAW,CAACQ,cAAD,EAAiB;AAC1BE,IAAAA,UAD0B;AAE1BK,IAAAA,WAAW,EAAEH,MAAM,CAACC,GAAP,CAAWR,IAAX,CAFa;AAG1BW,IAAAA,WAAW,EAAEf,WAAW,CAACgB;AAHC,GAAjB,CADE,CAAf;AAOA,QAAMG,CAAC,GAAGpB,WAAW,CAACQ,cAAD,EAAiB;AACpCE,IAAAA,UADoC;AAEpCK,IAAAA,WAAW,EAAEH,MAAM,CAACC,GAAP,CAAWP,OAAX,CAFuB;AAGpCU,IAAAA,WAAW,EAAEf,WAAW,CAACgB;AAHW,GAAjB,CAArB;AAMA,SAAOlB,KAAK,CAACe,CAAD,EAAII,CAAJ,EAAOC,CAAP,EAAUC,CAAV,CAAZ;AACD","sourcesContent":["import { processColor } from 'react-native';\nimport { round } from '../base';\nimport color from './color';\nimport interpolate, { Extrapolate } from './interpolate';\n\nfunction red(c) {\n  return (c >> 16) & 255;\n}\nfunction green(c) {\n  return (c >> 8) & 255;\n}\nfunction blue(c) {\n  return c & 255;\n}\nfunction opacity(c) {\n  return ((c >> 24) & 255) / 255;\n}\n\n/**\n * Use this if you want to interpolate an `Animated.Value` into color values.\n *\n * #### Why is this needed?\n *\n * Unfortunately, if you'll pass color values directly into the `outputRange` option\n * of `interpolate()` function, that won't really work (at least at the moment).\n * See https://github.com/software-mansion/react-native-reanimated/issues/181 .\n *\n * So, for now you can just use this helper instead.\n */\nexport default function interpolateColors(animationValue, options) {\n  const { inputRange, outputColorRange } = options;\n  const colors = outputColorRange.map(processColor);\n\n  const r = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(red),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const g = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(green),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const b = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(blue),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const a = interpolate(animationValue, {\n    inputRange,\n    outputRange: colors.map(opacity),\n    extrapolate: Extrapolate.CLAMP,\n  });\n\n  return color(r, g, b, a);\n}\n"]}